@page "/"
@using System.Globalization;
@using System.Text.RegularExpressions;
@using System.Text.Json;
@using TestMap.Data;
@inject IJSRuntime jsRuntime
@inject ICrimeService crimeService

<div style="height:100vh;width:100vw;position:relative">
    <LeafletMap Map="map" />

    <div style="display:flex;flex-direction:column;position:absolute;top:2px;left:2px;background-color:rgba(0,0,0,0.5);color:white;z-index: 1000;border-radius:10px;">
        <button class="btn btn-primary" @onclick="LoadCrimes">Load crimes</button>
        @crimes?.Count() crimes laoaded
        

        <div class="d-flex ml-2 mt-2">
            <label class="switch">
                <input type="checkbox" @bind-value=@displayHeat>
                <span class="slider round">Heat</span>
            </label>
        </div>

        @if (displayHeat)
        {
            <div class="d-flex ml-2 mt-2">
                <label class="mr-2">Radius </label>
                <input type="range" @bind-value="heatRadius" min="5" max="100" class="w-100" />
            </div>

            <div class="d-flex ml-2">
                <label class="mr-2">Opacity </label>
                <input type="range" @bind-value="heatOpacity" min="0" max="255" class="w-100" />
            </div>

            <div class="d-flex flex-column mt-4">
                @foreach (var g in heatCat)
                {
                    <button class="btn @(g.Key == selectedHeatCategory ? "btn-primary" : "btn-secondary") " @onclick="@(() => SetHeatCategory(g.Key))">@g.Key</button>
                }
            </div>
        }
        else
        {
            <div class="d-flex flex-column mt-4">
                @foreach (var g in crimeColors)
                {
                    <button class="btn @(selectedCategories.Contains(g.Key) ? "btn-primary" : "btn-secondary") " @onclick="@(() => ToggleCategory(g.Key))">@g.Key</button>
                }
            </div>
        }
    </div>



</div>

@if (loading)
{
    <div class="full-screen-loader">
        <div class="spinner"></div>
    </div>
}

@code {
    Map map;
    bool mapInitialized = false;
    bool loading = false;

    IEnumerable<StreetLevelCrime> crimes;

    Dictionary<string, HeatLayer> heatCat = new Dictionary<string, HeatLayer>();
    string selectedHeatCategory;

    Random rdn = new();
    Dictionary<string, string> crimeColors = new();
    List<string> selectedCategories = new();
    Dictionary<string, IEnumerable<Marker>> markers = new();

    int heatRadius
    {
        get => (heatCat.Values.FirstOrDefault()?.Radius).GetValueOrDefault();
        set
        {
            foreach (var h in heatCat.Values)
            {
                h.Radius = value;
                map.UpdateHeatOptions(h);
            }
        }
    }

    int heatOpacity
    {
        get => (heatCat.Values.FirstOrDefault()?.Opacity).GetValueOrDefault();
        set
        {
            foreach (var h in heatCat.Values)
            {
                h.Opacity = value;
                map.UpdateHeatOptions(h);
            }
        }
    }

    bool displayHeat = false;

    protected override Task OnInitializedAsync()
    {
        map = new Map(jsRuntime)
        {
            Center = new LatLng(51.5074f, 0.1278f),
			Zoom = 13f,
			ZoomControl = false,
		};


        map.OnInitialized += async () =>
        {
            map.AddLayer(new TileLayer
			{
				UrlTemplate = "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png",
				Attribution = "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors",
			});

            mapInitialized = true;
        };

        return base.OnInitializedAsync();
    }

    private async Task LoadCrimes()
    {
        map.ClearMarkers();
        foreach (var val in heatCat.Values)
            map.RemoveLayer(val);
        heatCat.Clear();
        markers.Clear();
        selectedHeatCategory = string.Empty;
        selectedCategories.Clear();


        loading = true;
        StateHasChanged();
        var bounds = await map.GetBounds();

        string date = DateTime.Now.AddMonths(-6).ToString("yyyy-MM");
        crimes = await QuadtreeDecompositionCrimes(bounds, date);
        if (crimes?.Any() == true)
        {
            var lst = crimes.Select(c =>
                {
                    var dt = GetDate(c.month);
                    if (dt == null) return null;
                    if (!float.TryParse(c.location.latitude, System.Globalization.NumberStyles.Float, CultureInfo.InvariantCulture, out float lat) ||
                        !float.TryParse(c.location.longitude, System.Globalization.NumberStyles.Float, CultureInfo.InvariantCulture, out float lng))
                        return null;
                    return new Crime()
                    {
                        Id = c.id,
                        Category = c.category,
                        Coordinates = new Coordinates(lat, lng),
                        Date = dt.Value
                    };
                }).Where(x => x != null).ToList();

            var opt = new JsonSerializerOptions()
            {
                PropertyNameCaseInsensitive = true,
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                IgnoreReadOnlyProperties = true,
                DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault,
            };

            var json = JsonSerializer.Serialize(lst, opt);
            File.AppendAllText($"D:\\tmp\\crimes-{DateTime.Now:yyyy-MM-dd.HH-mm-ss}.json", json);


            var groups = crimes.GroupBy(c => c.category);
            foreach (var g in groups)
            {
                List<LatLng> glst = new();
                List<Marker> gmarker = new();
                foreach (var crime in g)
                {
                    if (!float.TryParse(crime.location.latitude, System.Globalization.NumberStyles.Float, CultureInfo.InvariantCulture, out float lat) ||
                        !float.TryParse(crime.location.longitude, System.Globalization.NumberStyles.Float, CultureInfo.InvariantCulture, out float lng))
                        continue;
                    var latlng = new LatLng()
                    {
                        Lat = lat,
                        Lng = lng,
                        Alt = 1
                    };
                    glst.Add(latlng);

                    var marker = new Marker(lat, lng)
                        {
                            //ClusterID = 1
                            Icon = new()
                            {
                                IsIconDiv = true,
                                HTML = $"<span class=\"map-icon-circle\" style={GetCrimeStyle(crime)}></span>"
                            },
                            Tooltip = new()
                            {
                                Content = $"{crime.category}",
                            }
                        };
                    gmarker.Add(marker);
                }

                HeatLayer gheat = new HeatLayer()
                    {
                        LatLongs = glst.ToArray()
                    };
                heatCat.Add(g.Key, gheat);
                markers.Add(g.Key, gmarker);
            }
        }
        loading = false;
    }

    private DateTime? GetDate(string date)
    {
        var m = Regex.Match(date, @"(?<year>\d{4})-(?<month>\d{2})");
        if (!m.Success)
            return null;

        var year = m.Result("${year}");
        var month = m.Result("${month}");
        return new DateTime(int.Parse(year), int.Parse(month), 1);
    }

    private async Task<IEnumerable<StreetLevelCrime>> QuadtreeDecompositionCrimes(LatLngBounds bounds, string date)
    {
        var polygon = new PoliceAPI_Client.Models.Polygon(new Coordinate[]
        {
            new Coordinate(bounds._northEast.Lat, bounds._northEast.Lng),
            new Coordinate(bounds._northEast.Lat, bounds._southWest.Lng),
            new Coordinate(bounds._southWest.Lat, bounds._southWest.Lng),
            new Coordinate(bounds._southWest.Lat, bounds._northEast.Lng),
        });
        crimes = await crimeService.GetStreetLevelCrimes(polygon, date);
        if (crimes != null) return crimes;

        if (CalculateDistance(bounds._northEast, bounds._southWest) < 1000)
            return Array.Empty<StreetLevelCrime>();

        var midLat = (bounds._southWest.Lat + bounds._northEast.Lat) / 2;
        var midLon = (bounds._southWest.Lng + bounds._northEast.Lng) / 2;

        var bounds1 = new LatLngBounds()
            {
                _northEast = new LatLng(bounds._northEast.Lat, bounds._northEast.Lng),
                _southWest = new LatLng(midLat, midLon)
            };
        var bounds2 = new LatLngBounds()
            {
                _northEast = new LatLng(midLat, bounds._northEast.Lng),
                _southWest = new LatLng(bounds._southWest.Lat, midLon)
            };
        var bounds3 = new LatLngBounds()
            {
                _northEast = new LatLng(midLat, midLon),
                _southWest = new LatLng(bounds._southWest.Lat, bounds._southWest.Lng)
            };
        var bounds4 = new LatLngBounds()
            {
                _northEast = new LatLng(bounds._northEast.Lat, midLon),
                _southWest = new LatLng(midLat, bounds._southWest.Lng)
            };


        List<StreetLevelCrime> results = new();
        results.AddRange(await QuadtreeDecompositionCrimes(bounds1, date));
        results.AddRange(await QuadtreeDecompositionCrimes(bounds2, date));
        results.AddRange(await QuadtreeDecompositionCrimes(bounds3, date));
        results.AddRange(await QuadtreeDecompositionCrimes(bounds4, date));

        return results;
    }


    private string GetCrimeStyle(StreetLevelCrime crime)
    {
        if (crimeColors.TryGetValue(crime.category, out string res))
            return $"background-color:{res};";

        string hexColor = String.Format("#{0:X6}", rdn.Next(0x1000000));
        crimeColors[crime.category] = hexColor;
        return $"background-color:{hexColor};";
    }

    private void SetHeatCategory(string cat)
    {
        if (!string.IsNullOrEmpty(selectedHeatCategory) && heatCat.TryGetValue(selectedHeatCategory, out HeatLayer l))
            map.RemoveLayer(l);

        selectedHeatCategory = cat;

        if (heatCat.TryGetValue(selectedHeatCategory, out HeatLayer l1))
            map.AddLayer(l1);
    }

    private void ToggleCategory(string cat)
    {
        if (selectedCategories.Contains(cat))
        {
            if (markers.TryGetValue(cat, out var selMarkers))
            {
                foreach (var m in selMarkers)
                    map.RemoveMarker(m);
            }
            selectedCategories.Remove(cat);
        }
        else
        {
            if (markers.TryGetValue(cat, out var selMarkers))
            {
                foreach (var m in selMarkers)
                    map.AddMarker(m);
            }
            selectedCategories.Add(cat);
        }
    }

    private static double CalculateDistance(LatLng point1, LatLng point2)
    {
        var R = 6371e3; // Earth's radius in meters
        var lat1Rad = ToRadians(point1.Lat);
        var lat2Rad = ToRadians(point2.Lat);
        var deltaLat = ToRadians(point2.Lat - point1.Lat);
        var deltaLon = ToRadians(point2.Lng - point1.Lng);

        var a = Math.Sin(deltaLat / 2) * Math.Sin(deltaLat / 2) +
                Math.Cos(lat1Rad) * Math.Cos(lat2Rad) *
                Math.Sin(deltaLon / 2) * Math.Sin(deltaLon / 2);

        var c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));

        return R * c; // Distance in meters
    }

    private static double ToRadians(double angle)
    {
        return Math.PI * angle / 180.0;
    }
}
